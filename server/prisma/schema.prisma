generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String?
  name          String?
  image         String?
  deletedAt     DateTime?     @map("deleted_at")
  deletedBy     String?       @map("deleted_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  drafts        Draft[]
  refreshTokens RefreshToken[]

  @@index([deletedAt])
  @@map("users")
}

model Draft {
  id             String     @id @default(cuid())
  userId         String
  title          String     @default("Mein Lebenslauf")
  data           Json
  thumbnailUrl   String?    @map("thumbnail_url")
  thumbnailHash  String?    @map("thumbnail_hash")
  lastEvaluation Json?
  overallScore   Int?
  atsScore       Int?
  deletedAt      DateTime?  @map("deleted_at")
  deletedBy      String?    @map("deleted_by")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  snapshots      Snapshot[]
  User           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deletedAt])
  @@map("drafts")
}

model Snapshot {
  id        String   @id @default(cuid())
  draftId   String
  data      Json
  createdAt DateTime @default(now())
  Draft     Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@index([draftId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}
